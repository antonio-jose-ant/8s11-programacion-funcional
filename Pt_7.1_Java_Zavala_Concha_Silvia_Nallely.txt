import java.util.Scanner;

class TreeNode {
    int value;
    TreeNode left;
    TreeNode right;

    public TreeNode(int value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

class BinaryTree {
    TreeNode root;

    public BinaryTree() {
        root = null;
    }

    public void insert(int value) {
        root = insertRec(root, value);
    }

    private TreeNode insertRec(TreeNode root, int value) {
        if (root == null) {
            root = new TreeNode(value);
            return root;
        }

        if (value < root.value) {
            root.left = insertRec(root.left, value);
        } else if (value > root.value) {
            root.right = insertRec(root.right, value);
        }

        return root;
    }

    public void printTree(String traversalType) {
        if (traversalType.equals("preorder")) {
            preorderPrint(root);
        } else if (traversalType.equals("inorder")) {
            inorderPrint(root);
        } else if (traversalType.equals("postorder")) {
            postorderPrint(root);
        }
        System.out.println();
    }

    private void preorderPrint(TreeNode start) {
        if (start != null) {
            System.out.print(start.value + "-");
            preorderPrint(start.left);
            preorderPrint(start.right);
        }
    }

    private void inorderPrint(TreeNode start) {
        if (start != null) {
            inorderPrint(start.left);
            System.out.print(start.value + "-");
            inorderPrint(start.right);
        }
    }

    private void postorderPrint(TreeNode start) {
        if (start != null) {
            postorderPrint(start.left);
            postorderPrint(start.right);
            System.out.print(start.value + "-");
        }
    }
}

public class ArbolCompleto {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BinaryTree tree = new BinaryTree();

        System.out.print("Ingrese el número de nodos del árbol: ");
        int n = scanner.nextInt();

        System.out.println("Ingrese los valores de los nodos del árbol:");
        for (int i = 0; i < n; i++) {
            int value = scanner.nextInt();
            tree.insert(value);
        }

        System.out.print("Seleccione el tipo de recorrido (preorder, inorder, postorder): ");
        String traversalType = scanner.next();

        System.out.print("Recorrido " + traversalType + ": ");
        tree.printTree(traversalType);
    }
}